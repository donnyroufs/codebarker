datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Int       @default(1) // User

  votes    AnalysisVotes[]
  analyses Analysis[]
  accounts Account[]
  sessions Session[]
  answers  Answer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Kata {
  id String @id

  solution   Solution @relation(fields: [solutionId], references: [id])
  solutionId String   @unique

  content   Content @relation(fields: [contentId], references: [id])
  contentId String

  answers Answer[]
}

model Answer {
  id String @id

  smell     Int // Smell enum in domain
  isCorrect Boolean

  kata   Kata   @relation(fields: [kataId], references: [id])
  kataId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([id, kataId, userId])
}

model Solution {
  id String @id

  type Int // Smell enum in domain
  kata Kata?
}

model Analysis {
  id String @id

  smell          Int // Smell enum in domain
  reason         String  @db.Text
  repositoryName String
  author         String
  fileDir        String  @db.VarChar(255)
  content        Content @relation(fields: [contentId], references: [id])
  sha            String? @db.VarChar(255)
  status         Int     @default(0) // AnalysisEnum in domain @default Pending

  user   User   @relation(fields: [userId], references: [id])
  userId String

  contentId String
  votes     AnalysisVotes[]
}

model AnalysisVotes {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  Analysis   Analysis @relation(fields: [analysisId], references: [id])
  analysisId String

  type Int // AnalysisType enum in Domain

  @@id([analysisId, userId])
}

model Content {
  id String @id

  lines Json

  programmingLanguage          ProgrammingLanguage @relation(fields: [programmingLanguageExtension, programmingLanguageName], references: [extension, name])
  programmingLanguageExtension String
  programmingLanguageName      String

  kata     Kata[]
  analysis Analysis[]
}

model ProgrammingLanguage {
  extension String
  name      String

  contents Content[]

  @@unique([extension, name])
}
